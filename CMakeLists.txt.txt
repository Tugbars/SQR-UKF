cmake_minimum_required(VERSION 3.16)
project(control_simd C)

# ---- options ----
option(ENABLE_AVX2 "Enable AVX2+FMA fast paths for selected files" ON)
option(ENABLE_NATIVE "Add -march=native (GCC/Clang) or /arch:AVX2 (MSVC) globally" OFF)

set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

# ---- headers ----
set(PUBLIC_INC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/include)

# ---- sources ----
set(LINALG_SRCS
  src/linalg/tran.c
  src/linalg/mul.c
  src/linalg/lup.c
  src/linalg/inv.c
  src/linalg/qr.c
  src/linalg/cholupdate.c
)

set(FILTER_SRCS
  src/filter/sqr_ukf.c
)

# ---- libraries ----
add_library(control_linalg_simd STATIC ${LINALG_SRCS})
target_include_directories(control_linalg_simd PUBLIC ${PUBLIC_INC_DIR})

add_library(control_filter STATIC ${FILTER_SRCS})
target_include_directories(control_filter PUBLIC ${PUBLIC_INC_DIR})
target_link_libraries(control_filter PUBLIC control_linalg_simd)

# ---- global native tuning (optional) ----
if(ENABLE_NATIVE)
  if(MSVC)
    add_compile_options(/arch:AVX2)
  else()
    add_compile_options(-march=native)
  endif()
endif()

# ---- per-file AVX2/FMA flags (fixes "target specific option mismatch") ----
# Only needed for files that directly use _mm256_* intrinsics without per-function target attributes.
set(AVX2_FILES
  src/linalg/tran.c
  src/linalg/mul.c
  src/linalg/inv.c
  src/linalg/qr.c
  src/filter/sqr_ukf.c
)

if(ENABLE_AVX2)
  if(MSVC)
    foreach(f IN LISTS AVX2_FILES)
      set_source_files_properties(${f} PROPERTIES COMPILE_OPTIONS "/arch:AVX2")
    endforeach()
    # MSVC defines __AVX2__ but not __FMA__ consistently; add an FMA indicator if needed.
    target_compile_definitions(control_linalg_simd PRIVATE __FMA__=1)
    target_compile_definitions(control_filter     PRIVATE __FMA__=1)
  else()
    foreach(f IN LISTS AVX2_FILES)
      set_source_files_properties(${f} PROPERTIES COMPILE_OPTIONS "-mavx2;-mfma")
    endforeach()
  endif()
endif()

# ---- warnings (nice defaults) ----
if(MSVC)
  target_compile_options(control_linalg_simd PRIVATE /W4)
  target_compile_options(control_filter     PRIVATE /W4)
else()
  target_compile_options(control_linalg_simd PRIVATE -Wall -Wextra -Wpedantic)
  target_compile_options(control_filter     PRIVATE -Wall -Wextra -Wpedantic)
endif()

# ---- install (optional) ----
include(GNUInstallDirs)
install(TARGETS control_linalg_simd control_filter
        EXPORT control_simdTargets
        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
install(FILES ${PUBLIC_INC_DIR}/linalg_simd.h
        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
install(EXPORT control_simdTargets
        FILE control_simdTargets.cmake
        NAMESPACE control::
        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/control_simd)

# ---- pkg-config style usage hint (optional) ----
message(STATUS "Targets:")
message(STATUS "  control_linalg_simd (include: ${PUBLIC_INC_DIR})")
message(STATUS "  control_filter       (links: control_linalg_simd)")

add_executable(test_main main.c)
target_include_directories(test_main PRIVATE ${PUBLIC_INC_DIR})
target_link_libraries(test_main PRIVATE control_linalg_simd)